% calcolo pedine
free(X,Y):- cell(X,Y,C), C = 0.
enemy(X,Y):- cell(X,Y,C), C = 1.
ally(I,X,Y):- cell(X,Y,C), C = 2, I=X*10+Y.

% Guess
move(I,X,Y) | noMove(I,X,Y) :- canMove(I,X,Y).

% movimenti 
canMove(I,X,Y):-canMoveO(I,X,Y).
canMove(I,X,Y):-canMoveS(I,X,Y).
canMove(I,X,Y):-canMoveN(I,X,Y).
canMove(I,X,Y):-canMoveE(I,X,Y).

%ovest
canMoveO(I,X,Z):- free(X,Z), ally(I,X,Y), Z=Y-1.
canMoveO(I,X,Z):- free(X,Z), canMoveO(I,X,Y), Z=Y-1, Z>=0.
passiO(N,I):- #count{I,Y:canMoveO(I,_,Y)}=N,canMoveO(I,_,_).

%est
canMoveE(I,X,Z):- free(X,Z), ally(I,X,Y), Z=Y+1.
canMoveE(I,X,Z):- free(X,Z), canMoveE(I,X,Y), Z=Y+1, Z<=7.
passiE(N,I):- #count{I,Y:canMoveE(I,_,Y)}=N,canMoveE(I,_,_).

%nord
canMoveN(I,Z,Y):- free(Z,Y), ally(I,X,Y), Z=X-1.
canMoveN(I,Z,Y):- free(Z,Y), canMoveN(I,X,Y), Z=X-1, Z>=0.
passiN(N,I):- #count{I,X:canMoveN(I,X,_)}=N,canMoveN(I,_,_).

%sud
canMoveS(I,Z,Y):- free(Z,Y), ally(I,X,Y), Z=X+1.
canMoveS(I,Z,Y):- free(Z,Y), canMoveS(I,X,Y), Z=X+1, Z<=7.
passiS(N,I):- #count{I,X:canMoveS(I,X,_)}=N,canMoveS(I,_,_).

%nemici vicini alla posizione libera
enemyNear(Z,X,Y):- #count{X,Y:enemy(X+1,Y)}=N, #count{X,Y:enemy(X-1,Y)}=S, 
                   #count{X,Y:enemy(X,Y+1)}=E, #count{X,Y:enemy(X,Y-1)}=O, free(X,Y), Z=N+S+E+O.

%alleati vicini ai nemici
allyNearEnemy(Z,X,Y):- #count{X,Y:ally(_,X+1,Y)}=N, #count{X,Y:ally(_,X-1,Y)}=S, 
                       #count{X,Y:ally(_,X,Y+1)}=E, #count{X,Y:ally(_,X,Y-1)}=O, enemy(X,Y), Z=N+S+E+O.  

maxEnemyNear(Z,X,Y):- #max{C: enemyNear(C,_,_)}=Z, enemyNear(Z,X,Y).
minEnemyNear(Z,X,Y):- #min{C: enemyNear(C,_,_)}=Z, enemyNear(Z,X,Y).

%A livello più alto (3), cerchiamo di spostarci in una casella che permette di mangiare più pedine possibile
:~ noMove(I,X,Y), maxEnemyNear(Z,X,Y). [Z@2,X,Y]

%A livello 2, cerchiamo di NON spostarci in una casella che permette di mangiare una sola pedina nemica
:~ move(I,X,Y), enemyNear(N,X,Y), N<=1. [N@1,X,Y]

%Cerchiamo di imporre che la mossa avvenga vicino un nemico che, a sua volta, ha un nostro alleato accanto
:~ move(I,A,B), move(I1,C,D), enemy(A,B+1), allyNearEnemy(Z,A,B+1), Z>0, enemy(C+1,D), allyNearEnemy(N,C+1,D), N<Z, C!=A , B!=D, I==I1. [Z@3, A,B]


% movimenti nemici
enemyCanMove(X,Y):-enemyCanMoveO(X,Y).
enemyCanMove(X,Y):-enemyCanMoveS(X,Y).
enemyCanMove(X,Y):-enemyCanMoveN(X,Y).
enemyCanMove(X,Y):-enemyCanMoveE(X,Y).

%ovest nemici
enemyCanMoveO(X,Z):- free(X,Z), enemy(X,Y), Z=Y-1.
enemyCanMoveO(X,Z):- free(X,Z), enemyCanMoveO(X,Y), Z=Y-1, Z>=0.

%est nemici
enemyCanMoveE(X,Z):- free(X,Z), enemy(X,Y), Z=Y+1.
enemyCanMoveE(X,Z):- free(X,Z), enemyCanMoveE(X,Y), Z=Y+1, Z<=7.

%nord nemici
enemyCanMoveN(Z,Y):- free(Z,Y), enemy(X,Y), Z=X-1.
enemyCanMoveN(Z,Y):- free(Z,Y), enemyCanMove(X,Y), Z=X-1, Z>=0.

%sud nemici
enemyCanMoveS(Z,Y):- free(Z,Y), enemyCanMoveS(X,Y), Z=X+1.
enemyCanMoveS(Z,Y):- free(Z,Y), enemyCanMoveS(X,Y), Z=X+1, Z<=7.

%attacco non vorrei non muovermi se un nemico vicino ad un alleato può essere mangiato 
:~ noMove(_,X,Y), enemy(X,Y+1), ally(_,X,Y+1). [1@3,X,Y]
:~ noMove(_,X,Y), enemy(X+1,Y), ally(_,X+2,Y). [1@3,X,Y]
:~ noMove(_,X,Y), enemy(X,Y-1), ally(_,X,Y-2). [1@3,X,Y]
:~ noMove(_,X,Y), enemy(X-1,Y), ally(_,X-2,Y). [1@3,X,Y]


%difesa
:~ noMove(_,X,Y+1), ally(_,X,Y), ally(_,X,Y+2), enemyCanMove(X,Y+1). [1@2,X,Y]
:~ noMove(_,X+1,Y), ally(_,X,Y), ally(_,X+2,Y), enemyCanMove(X+1,Y). [1@2,X,Y]
:~ noMove(_,X,Y-1), ally(_,X,Y), ally(_,X,Y-2), enemyCanMove(X,Y-1), Y>=2. [1@2,X,Y]
:~ noMove(_,X-1,Y), ally(_,X,Y), ally(_,X-2,Y), enemyCanMove(X-1,Y),X>=2. [1@2,X,Y]

%Non voglio che mi vengano restituiti più move.
:- #count{I,X,Y : move(I,X,Y)}=N, N!=1. 












